<Project Sdk="Microsoft.NET.Sdk.Web">
	<PropertyGroup>
		<TargetFramework>netcoreapp3.1</TargetFramework>
		<TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
		<TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>
		<IsPackable>false</IsPackable>
		<SpaRoot>..\Traisi.ClientApp\</SpaRoot>
		<DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRoot)node_modules\**</DefaultItemExcludes>
		<!-- Set this to true if you enable server-side prerendering -->
		<BuildServerSideRenderer>false</BuildServerSideRenderer>
		<Description>TRAISI</Description>
		<Copyright>© 2020 University of Toronto &amp; UTTRI</Copyright>
		<Company>University of Toronto</Company>
		<Version>2.0.0</Version>
		<GenerateAssemblyInfo>false</GenerateAssemblyInfo>
		<GenerateFullPaths>true</GenerateFullPaths>
		<AspNetCoreModuleName>AspNetCoreModuleV2</AspNetCoreModuleName>
	</PropertyGroup>
	<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
		<LangVersion>8.0</LangVersion>
	</PropertyGroup>
	<PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
		<LangVersion>8.0</LangVersion>
	</PropertyGroup>
	<ItemGroup>
		<PackageReference Include="AutoMapper.Extensions.Microsoft.DependencyInjection" Version="7.0.0" />
		<PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="3.1.3">
			<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
			<PrivateAssets>all</PrivateAssets>
		</PackageReference>
		<PackageReference Include="Microsoft.Extensions.Caching.Memory" Version="3.1.3" />
		<PackageReference Include="Npgsql.EntityFrameworkCore.PostgreSQL.NetTopologySuite" Version="3.1.3" />
		<PackageReference Include="Serilog.AspnetCore" Version="3.2.0" />
		<PackageReference Include="Serilog.Sinks.Console" Version="3.1.1" />
		<PackageReference Include="Serilog.Sinks.Seq" Version="4.0.0" />
		<PackageReference Include="System.Linq.Async" Version="4.1.1" />
		<PackageReference Include="System.Runtime.Caching" Version="4.7.0" />
		<PackageReference Include="AspNet.Security.OAuth.Validation" Version="2.0.0" />
		<PackageReference Include="AutoMapper" Version="9.0.0" />
		<PackageReference Include="CsvHelper" Version="15.0.5" />
		<PackageReference Include="FluentValidation.AspNetCore" Version="8.6.2" />
		<PackageReference Include="Geocoding.Core" Version="4.0.1" />
		<PackageReference Include="Geocoding.Google" Version="4.0.1" />
		<PackageReference Include="HangFire" Version="1.7.11" />
		<PackageReference Include="Hangfire.PostgreSql" Version="1.6.4" />
		<PackageReference Include="MailKit" Version="2.6.0" />
		<PackageReference Include="Microsoft.AspNetCore.SpaServices.Extensions" Version="3.1.3" />
		<PackageReference Include="Microsoft.VisualStudio.Web.CodeGeneration.Design" Version="3.1.2" />
		<PackageReference Include="Npgsql" Version="4.1.3" />
		<PackageReference Include="Npgsql.EntityFrameworkCore.PostgreSQL" Version="3.1.3" />
		<PackageReference Include="OpenIddict" Version="2.0.1" />
		<PackageReference Include="OpenIddict.EntityFrameworkCore" Version="2.0.1" />
		<PackageReference Include="OpenIddict.Mvc" Version="2.0.1" />
		<PackageReference Include="RestSharp" Version="106.10.1" />
		<PackageReference Include="Serilog.Extensions.Logging.File" Version="2.0.0" />
		<PackageReference Include="Microsoft.AspNetCore.Mvc.NewtonsoftJson" Version="3.1.3" />
		<PackageReference Include="NSwag.AspNetCore" Version="13.4.2" />
	</ItemGroup>
	<ItemGroup>
		<ProjectReference Include="..\Traisi.Data\Traisi.Data.csproj" />
		<ProjectReference Include="..\Traisi.Questions\Traisi.Questions.csproj" />
		<ProjectReference Include="..\Traisi.Sdk\Traisi.Sdk.csproj" />
		<ProjectReference Include="..\Traisi.Models\Traisi.Models.csproj" />

	</ItemGroup>
	<ItemGroup>
		<None Include="$(SpaRoot)**" Exclude="$(SpaRoot)node_modules\**" />
	</ItemGroup>
	<ItemGroup>
		<EmbeddedResource Remove="$(SpaRoot)\**" />
		<None Remove="$(SpaRoot)\**" />
	</ItemGroup>

	<ItemGroup>
		<Folder Include="Logs\" />
		<Folder Include="Migrations\" />

	</ItemGroup>

	<ItemGroup>
		<None Include="appsettings.Development.json" CopyToPublishDirectory="Never" />
		<None Include="staging.sh" CopyToPublishDirectory="Never" />
		<None Include="development" CopyToPublishDirectory="Never" />

		<!-- remove app settings local in publish-->
		<None Include="appsettings.local.json" CopyToPublishDirectory="Never" />

	</ItemGroup>

	<Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
		<!-- Ensure Node.js is installed -->
		<Exec Command="node --version" ContinueOnError="true">
			<Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
		</Exec>
		<Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
		<Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
		<Exec WorkingDirectory="$(SpaRoot)" Command="npm install" />
		<!--	<Exec WorkingDirectory="$(SpaRoot)" Command="npm link traisi-question-sdk" /> -->
	</Target>
	<Target Name="DeleteDist" BeforeTargets="ComputeFilesToPublish" Condition="'$(Configuration)' == 'Release'">

		<RemoveDir Directories="$(SpaRoot)dist" />
		<RemoveDir Directories="$(OutDir)/publish" />
		<Message Importance="high" Text="Cleaning $(OutDir)/publish" />

	</Target>

	<ItemGroup>
		<Content Include="$(SpaRoot)\dist**">
			<CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
		</Content>
	</ItemGroup>

	<ItemGroup>

		<None Include="$(SpaRoot)\**\**tsconfig" CopyToOutputDirectory="Never" />
		<!--<Content Include="$(SpaRoot)\dist\**" Link="Traisi.ClientApp\dist\%(RecursiveDir)%(Filename)%(Extension)" CopyToOutputDirectory="Always" /> -->
		<Content Update="appsettings.local.json" CopyToPublishDirectory="Never" CopyToOutputDirectory="PreserveNewest" />
		<Content Update="appsettings.Development.json" CopyToPublishDirectory="Never" CopyToOutputDirectory="Never" />
		<None Include="extensions\**" CopyToOutputDirectory="PreserveNewest" />
		<!-- CopyToOutputDirectory = { Always, PreserveNewest, Never } -->
	</ItemGroup>

	<Target Name="BuildRunWebpack" BeforeTargets="BeforeBuild" Condition="'$(Configuration)' == 'Release'">
		<Message Text="Building admin angular app..." Importance="high" />
		<Exec WorkingDirectory="$(SpaRoot)" Command="npm run build -- --prod  --source-map" StandardOutputImportance="low" StandardErrorImportance="low" />
		<Message Text="Building survey viewer angular app..." Importance="high" />
		<Exec WorkingDirectory="$(SpaRoot)" Command="npm run build -- survey-viewer-app --aot=false --build-optimizer=false --source-map" StandardOutputImportance="low" StandardErrorImportance="low" />
		<Message Text="Finished building client side components." Importance="high" />
	</Target>

	<Target Name="BuildTraisiClientSdk" AfterTargets="Build">
		<Exec WorkingDirectory="..\Traisi.Sdk\Client" Command="npm run build" StandardOutputImportance="low" StandardErrorImportance="low" />
		<Message Text="Building Traisi.Sdk client module" Importance="high" />
	</Target>

	<Target Name="CopyClientBuild" AfterTargets="Build">
	 <RemoveDir Directories="$(OutputPath)\Traisi.ClientApp" />
	<Message Text="Copying client files to output directory..." Importance="high" />
		<ItemGroup>
			<_CopyItems Include="$(SpaRoot)dist\**" />
		</ItemGroup>
		<Copy SourceFiles="@(_CopyItems)" DestinationFolder="$(OutputPath)\Traisi.ClientApp\dist\%(_CopyItems.RecursiveDir)" />
	</Target>

	<Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">
		<!-- As part of publishing, ensure the JS resources are freshly built in production mode -->

		<Message Text="Installing node package dependencies for main client app..." Importance="high" />
		<Exec WorkingDirectory="$(SpaRoot)" Command="npm install --no-audit" StandardOutputImportance="low" StandardErrorImportance="low" />
		<Message Text="Building admin angular app..." Importance="high" />
		<Exec WorkingDirectory="$(SpaRoot)" Command="npm run build -- --prod  " StandardOutputImportance="low" StandardErrorImportance="low" />
		<Message Text="Building survey viewer angular app..." Importance="high" />
		<Exec WorkingDirectory="$(SpaRoot)" Command="npm run build -- survey-viewer-app --prod --aot=false --build-optimizer=false" StandardOutputImportance="low" StandardErrorImportance="low" />

		<!--<Exec WorkingDirectory="$(SpaRoot)" Command="npm run build:ssr -/- -/-prod" Condition=" '$(BuildServerSideRenderer)' == 'true' " />
		<Exec WorkingDirectory="$(SpaRoot)" Command="npm run build:ssr -/- survey-viewer-app -/-prod -/-aot=false -/-build-optimizer=false" Condition=" '$(BuildServerSideRenderer)' == 'true' " />
		-->
		<Message Text="Finished building client side components." Importance="high" />
		<ItemGroup>
			<Content Update="$(SpaRoot)dist\admin\**; $(SpaRoot)dist\survey\**" CopyToOutputDirectory="Always" />
		</ItemGroup>

		<!-- Include the newly-built files in the publish output -->
		<ItemGroup>
			<!--<DistFiles Include="$(SpaRoot)\**" Remove="$(SpaRoot)\node_modules\**"/>  -->
			<DistFiles Include="extensions\**; Resources\**;" />
			<ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
				<RelativePath>%(DistFiles.Identity)</RelativePath>
				<CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
			</ResolvedFileToPublish>
		</ItemGroup>
	</Target>
	<Target Name="CopyTraisiClientApp" AfterTargets="ComputeFilesToPublish">
		<ItemGroup>
			<DistFiles Include="..\Traisi.ClientApp\dist\admin\**;..\Traisi.ClientApp\dist\survey\**;" />
			<ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
				<RelativePath>publish/%(DistFiles.Identity)</RelativePath>
				<CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
			</ResolvedFileToPublish>
		</ItemGroup>
	</Target>
</Project>