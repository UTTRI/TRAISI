// <auto-generated />
using System;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Traisi.Data;
using Traisi.Sdk.Interfaces;

namespace Traisi.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210326183152_Municipality")]
    partial class Municipality
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:postgis", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictApplication", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ClientSecret")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ConsentType")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Permissions")
                        .HasColumnType("text");

                    b.Property<string>("PostLogoutRedirectUris")
                        .HasColumnType("text");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<string>("RedirectUris")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("OpenIddictApplications");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictAuthorization", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<string>("Scopes")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("character varying(450)")
                        .HasMaxLength(450);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictAuthorizations");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictScope", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<string>("Resources")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("OpenIddictScopes");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictToken", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("text");

                    b.Property<string>("AuthorizationId")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Payload")
                        .HasColumnType("text");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<string>("ReferenceId")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("character varying(450)")
                        .HasMaxLength(450);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("ReferenceId")
                        .IsUnique();

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictTokens");
                });

            modelBuilder.Entity("Traisi.Data.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Traisi.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Configuration")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("JobTitle")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<int>("UserType");
                });

            modelBuilder.Entity("Traisi.Data.Models.Groups.ApiKeys", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("GoogleMapsApiKey")
                        .HasColumnType("text");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<string>("MailgunApiKey")
                        .HasColumnType("text");

                    b.Property<string>("MapBoxApiKey")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("GroupId")
                        .IsUnique();

                    b.ToTable("ApiKeys");
                });

            modelBuilder.Entity("Traisi.Data.Models.Groups.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer");

                    b.Property<string>("HTML")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("EmailTemplates");
                });

            modelBuilder.Entity("Traisi.Data.Models.Groups.GroupMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Group")
                        .HasColumnType("text");

                    b.Property<bool>("GroupAdmin")
                        .HasColumnType("boolean");

                    b.Property<string>("TraisiUserId")
                        .HasColumnType("text");

                    b.Property<int?>("UserGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TraisiUserId");

                    b.HasIndex("UserGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("Traisi.Data.Models.Groups.UserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("UserGroups");
                });

            modelBuilder.Entity("Traisi.Data.Models.Municipality.Local", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Locals");
                });

            modelBuilder.Entity("Traisi.Data.Models.Municipality.Meta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Metas");
                });

            modelBuilder.Entity("Traisi.Data.Models.Municipality.Metropolitan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Metropolitans");
                });

            modelBuilder.Entity("Traisi.Data.Models.Municipality.Regional", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Regionals");
                });

            modelBuilder.Entity("Traisi.Data.Models.Questions.QuestionConditional", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Condition")
                        .HasColumnType("integer");

                    b.Property<int>("SourceQuestionId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SourceQuestionId");

                    b.ToTable("QuestionConditionals");
                });

            modelBuilder.Entity("Traisi.Data.Models.Questions.QuestionConditionalOperator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("LhsId")
                        .HasColumnType("integer");

                    b.Property<int>("OperatorType")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int?>("RhsId")
                        .HasColumnType("integer");

                    b.Property<int>("TargetQuestionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LhsId");

                    b.HasIndex("RhsId");

                    b.HasIndex("TargetQuestionId");

                    b.ToTable("QuestionCondtionalOperators");
                });

            modelBuilder.Entity("Traisi.Data.Models.Questions.QuestionConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsResourceOnly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSourceInputRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("QuestionPartId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<int>("ValueType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuestionPartId");

                    b.ToTable("QuestionConfigurations");
                });

            modelBuilder.Entity("Traisi.Data.Models.Questions.QuestionOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionPartParentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuestionPartParentId");

                    b.HasIndex("Code", "QuestionPartParentId")
                        .IsUnique();

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("Traisi.Data.Models.Questions.QuestionOptionConditional", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Condition")
                        .HasColumnType("integer");

                    b.Property<int>("SourceQuestionId")
                        .HasColumnType("integer");

                    b.Property<int>("TargetOptionId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SourceQuestionId");

                    b.HasIndex("TargetOptionId");

                    b.ToTable("QuestionOptionConditionals");
                });

            modelBuilder.Entity("Traisi.Data.Models.Questions.QuestionPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsGroupQuestion")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("QuestionPartId")
                        .HasColumnType("integer");

                    b.Property<string>("QuestionType")
                        .HasColumnType("text");

                    b.Property<int?>("SurveyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuestionPartId");

                    b.HasIndex("SurveyId");

                    b.ToTable("QuestionParts");
                });

            modelBuilder.Entity("Traisi.Data.Models.Questions.QuestionPartView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CATIDependentId")
                        .HasColumnType("integer");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<bool>("IsDefaultHidden")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHousehold")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMultiView")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOptional")
                        .HasColumnType("boolean");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentViewId")
                        .HasColumnType("integer");

                    b.Property<int?>("QuestionPartId")
                        .HasColumnType("integer");

                    b.Property<int?>("RepeatSourceId")
                        .HasColumnType("integer");

                    b.Property<int?>("SurveyViewId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CATIDependentId");

                    b.HasIndex("ParentViewId");

                    b.HasIndex("QuestionPartId");

                    b.HasIndex("RepeatSourceId");

                    b.HasIndex("SurveyViewId");

                    b.ToTable("QuestionPartViews");
                });

            modelBuilder.Entity("Traisi.Data.Models.ResponseTypes.ResponseValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ResponseType")
                        .HasColumnType("integer");

                    b.Property<int?>("SurveyResponseId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SurveyResponseId");

                    b.ToTable("SurveyResponseValues");

                    b.HasDiscriminator<int>("ResponseType");
                });

            modelBuilder.Entity("Traisi.Data.Models.Surveys.ExtensionConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Configuration")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValue("{}");

                    b.Property<string>("ExtensionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SurveyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("ExtensionConfigurations");
                });

            modelBuilder.Entity("Traisi.Data.Models.Surveys.Groupcode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsTest")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("SurveyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("Groupcodes");
                });

            modelBuilder.Entity("Traisi.Data.Models.Surveys.Label", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<int?>("QuestionConfigurationId")
                        .HasColumnType("integer");

                    b.Property<int?>("QuestionOptionId")
                        .HasColumnType("integer");

                    b.Property<int?>("QuestionPartViewDescriptionId")
                        .HasColumnType("integer");

                    b.Property<int?>("QuestionPartViewId")
                        .HasColumnType("integer");

                    b.Property<int?>("SurveyId")
                        .HasColumnType("integer");

                    b.Property<int?>("SurveyLogicId")
                        .HasColumnType("integer");

                    b.Property<int?>("SurveyViewScreeningId")
                        .HasColumnType("integer");

                    b.Property<int?>("SurveyViewTermsId")
                        .HasColumnType("integer");

                    b.Property<int?>("SurveyViewThankYouId")
                        .HasColumnType("integer");

                    b.Property<int?>("SurveyViewWelcomePageId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionConfigurationId");

                    b.HasIndex("QuestionOptionId");

                    b.HasIndex("QuestionPartViewDescriptionId");

                    b.HasIndex("QuestionPartViewId");

                    b.HasIndex("SurveyId");

                    b.HasIndex("SurveyLogicId");

                    b.HasIndex("SurveyViewScreeningId");

                    b.HasIndex("SurveyViewTermsId");

                    b.HasIndex("SurveyViewThankYouId");

                    b.HasIndex("SurveyViewWelcomePageId");

                    b.ToTable("Labels");
                });

            modelBuilder.Entity("Traisi.Data.Models.Surveys.Shortcode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("GroupcodeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsTest")
                        .HasColumnType("boolean");

                    b.Property<bool>("SurveyCompleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("SurveyId")
                        .HasColumnType("integer");

                    b.Property<bool>("SurveyRejected")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("GroupcodeId");

                    b.HasIndex("SurveyId");

                    b.ToTable("Shortcodes");
                });

            modelBuilder.Entity("Traisi.Data.Models.Surveys.SiteSurveyTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CSS")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("HTML")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("SiteSurveyTemplates");
                });

            modelBuilder.Entity("Traisi.Data.Models.Surveys.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DefaultLanguage")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Group")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Owner")
                        .HasColumnType("text");

                    b.Property<string>("RejectionLink")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("StyleTemplate")
                        .HasColumnType("text");

                    b.Property<string>("SuccessLink")
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("Traisi.Data.Models.Surveys.SurveyAccessRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTimeOffset>("AccessDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AccessUserId")
                        .HasColumnType("text");

                    b.Property<string>("QueryParams")
                        .HasColumnType("jsonb");

                    b.Property<string>("RemoteIpAddress")
                        .HasColumnType("text");

                    b.Property<string>("RequestUrl")
                        .HasColumnType("text");

                    b.Property<int?>("RespondentId")
                        .HasColumnType("integer");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccessUserId");

                    b.HasIndex("RespondentId");

                    b.ToTable("SurveyAccessRecords");
                });

            modelBuilder.Entity("Traisi.Data.Models.Surveys.SurveyLogic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("Condition")
                        .HasColumnType("integer");

                    b.Property<int?>("LogicType")
                        .HasColumnType("integer");

                    b.Property<int?>("Operator")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<int?>("QuestionPartId")
                        .HasColumnType("integer");

                    b.Property<int?>("RootId")
                        .HasColumnType("integer");

                    b.Property<int?>("SurveyId")
                        .HasColumnType("integer");

                    b.Property<int?>("SurveyLogicId")
                        .HasColumnType("integer");

                    b.Property<int?>("ValidationQuestionId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuestionPartId");

                    b.HasIndex("RootId");

                    b.HasIndex("SurveyId");

                    b.HasIndex("SurveyLogicId");

                    b.HasIndex("ValidationQuestionId");

                    b.ToTable("SurveyLogic");
                });

            modelBuilder.Entity("Traisi.Data.Models.Surveys.SurveyPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("PermissionCode")
                        .HasColumnType("text");

                    b.Property<int>("SurveyId")
                        .HasColumnType("integer");

                    b.Property<string>("TraisiUserId")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.HasIndex("TraisiUserId");

                    b.HasIndex("UserId");

                    b.ToTable("SurveyPermissions");
                });

            modelBuilder.Entity("Traisi.Data.Models.Surveys.SurveyRespondent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("HasConsent")
                        .HasColumnType("boolean");

                    b.Property<Address>("HomeAddress")
                        .HasColumnType("jsonb");

                    b.Property<Point>("HomeLocation")
                        .HasColumnType("geometry");

                    b.Property<JsonDocument>("Meta")
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Relationship")
                        .HasColumnType("text");

                    b.Property<int>("RespondentType")
                        .HasColumnType("integer");

                    b.Property<int?>("SurveyRespondentGroupId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SurveyRespondentGroupId");

                    b.ToTable("SurveyRespondents");

                    b.HasDiscriminator<int>("RespondentType");
                });

            modelBuilder.Entity("Traisi.Data.Models.Surveys.SurveyRespondentGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("GroupPrimaryRespondentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupPrimaryRespondentId")
                        .IsUnique();

                    b.ToTable("SurveyRespondentGroups");
                });

            modelBuilder.Entity("Traisi.Data.Models.Surveys.SurveyResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Excluded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPartial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int?>("QuestionPartId")
                        .HasColumnType("integer");

                    b.Property<int>("Repeat")
                        .HasColumnType("integer");

                    b.Property<int?>("RespondentId")
                        .HasColumnType("integer");

                    b.Property<int?>("SurveyAccessRecordId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("QuestionPartId");

                    b.HasIndex("RespondentId");

                    b.HasIndex("SurveyAccessRecordId");

                    b.ToTable("SurveyResponses");
                });

            modelBuilder.Entity("Traisi.Data.Models.Surveys.SurveyView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("SurveyId")
                        .HasColumnType("integer");

                    b.Property<string>("ViewName")
                        .IsRequired()
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyViews");
                });

            modelBuilder.Entity("Traisi.Data.Models.SurveyUser", b =>
                {
                    b.HasBaseType("Traisi.Data.Models.ApplicationUser");

                    b.Property<string>("HomeAddress")
                        .HasColumnType("jsonb");

                    b.Property<Point>("HomeLocation")
                        .HasColumnType("geography");

                    b.Property<int?>("PrimaryRespondentId")
                        .HasColumnType("integer");

                    b.Property<int?>("ShortcodeId")
                        .HasColumnType("integer");

                    b.HasIndex("PrimaryRespondentId");

                    b.HasIndex("ShortcodeId");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Traisi.Data.Models.TraisiUser", b =>
                {
                    b.HasBaseType("Traisi.Data.Models.ApplicationUser");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Traisi.Data.Models.ResponseTypes.DateTimeResponse", b =>
                {
                    b.HasBaseType("Traisi.Data.Models.ResponseTypes.ResponseValue");

                    b.Property<DateTimeOffset>("Value")
                        .HasColumnType("timestamp with time zone");

                    b.HasDiscriminator().HasValue(7);
                });

            modelBuilder.Entity("Traisi.Data.Models.ResponseTypes.JsonResponse", b =>
                {
                    b.HasBaseType("Traisi.Data.Models.ResponseTypes.ResponseValue");

                    b.Property<string>("Value")
                        .HasColumnName("JsonResponse_Value")
                        .HasColumnType("jsonb");

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("Traisi.Data.Models.ResponseTypes.LocationResponse", b =>
                {
                    b.HasBaseType("Traisi.Data.Models.ResponseTypes.ResponseValue");

                    b.Property<Address>("Address")
                        .HasColumnType("jsonb");

                    b.Property<Point>("Location")
                        .HasColumnType("geography");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("Traisi.Data.Models.ResponseTypes.NumberResponse", b =>
                {
                    b.HasBaseType("Traisi.Data.Models.ResponseTypes.ResponseValue");

                    b.Property<double>("Value")
                        .HasColumnName("NumberResponse_Value")
                        .HasColumnType("double precision");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Traisi.Data.Models.ResponseTypes.OptionSelectResponse", b =>
                {
                    b.HasBaseType("Traisi.Data.Models.ResponseTypes.ResponseValue");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnName("OptionSelectResponse_Value")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue(8);
                });

            modelBuilder.Entity("Traisi.Data.Models.ResponseTypes.StringResponse", b =>
                {
                    b.HasBaseType("Traisi.Data.Models.ResponseTypes.ResponseValue");

                    b.Property<string>("Value")
                        .HasColumnName("StringResponse_Value")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Traisi.Data.Models.Surveys.PrimaryRespondent", b =>
                {
                    b.HasBaseType("Traisi.Data.Models.Surveys.SurveyRespondent");

                    b.Property<int?>("GroupcodeId")
                        .HasColumnType("integer");

                    b.Property<int?>("ShortcodeId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("SurveyAccessDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -5, 0, 0, 0)));

                    b.Property<int?>("SurveyId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasIndex("GroupcodeId");

                    b.HasIndex("ShortcodeId");

                    b.HasIndex("SurveyId");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Traisi.Data.Models.Surveys.SubRespondent", b =>
                {
                    b.HasBaseType("Traisi.Data.Models.Surveys.SurveyRespondent");

                    b.Property<int?>("PrimaryRespondentId")
                        .HasColumnType("integer");

                    b.HasIndex("PrimaryRespondentId");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Traisi.Data.Models.ResponseTypes.TimelineResponse", b =>
                {
                    b.HasBaseType("Traisi.Data.Models.ResponseTypes.LocationResponse");

                    b.Property<string>("Identifier")
                        .HasColumnType("text");

                    b.Property<string>("Meta")
                        .HasColumnType("jsonb");

                    b.Property<string>("Mode")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Purpose")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("TimeA")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("TimeB")
                        .HasColumnType("timestamp with time zone");

                    b.HasDiscriminator().HasValue(6);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Traisi.Data.Models.ApplicationRole", null)
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Traisi.Data.Models.ApplicationUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Traisi.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Traisi.Data.Models.ApplicationRole", null)
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Traisi.Data.Models.ApplicationUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Traisi.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictAuthorization", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictApplication", "Application")
                        .WithMany("Authorizations")
                        .HasForeignKey("ApplicationId");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictToken", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictApplication", "Application")
                        .WithMany("Tokens")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictAuthorization", "Authorization")
                        .WithMany("Tokens")
                        .HasForeignKey("AuthorizationId");
                });

            modelBuilder.Entity("Traisi.Data.Models.Groups.ApiKeys", b =>
                {
                    b.HasOne("Traisi.Data.Models.Groups.UserGroup", "Group")
                        .WithOne("ApiKeySettings")
                        .HasForeignKey("Traisi.Data.Models.Groups.ApiKeys", "GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Traisi.Data.Models.Groups.EmailTemplate", b =>
                {
                    b.HasOne("Traisi.Data.Models.Groups.UserGroup", "Group")
                        .WithMany("EmailTemplates")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Traisi.Data.Models.Groups.GroupMember", b =>
                {
                    b.HasOne("Traisi.Data.Models.TraisiUser", null)
                        .WithMany("Groups")
                        .HasForeignKey("TraisiUserId");

                    b.HasOne("Traisi.Data.Models.Groups.UserGroup", "UserGroup")
                        .WithMany("Members")
                        .HasForeignKey("UserGroupId");

                    b.HasOne("Traisi.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Traisi.Data.Models.Questions.QuestionConditional", b =>
                {
                    b.HasOne("Traisi.Data.Models.Questions.QuestionPartView", "SourceQuestion")
                        .WithMany()
                        .HasForeignKey("SourceQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Traisi.Data.Models.Questions.QuestionConditionalOperator", b =>
                {
                    b.HasOne("Traisi.Data.Models.Questions.QuestionConditional", "Lhs")
                        .WithMany()
                        .HasForeignKey("LhsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Traisi.Data.Models.Questions.QuestionConditional", "Rhs")
                        .WithMany()
                        .HasForeignKey("RhsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Traisi.Data.Models.Questions.QuestionPartView", "TargetQuestion")
                        .WithMany()
                        .HasForeignKey("TargetQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Traisi.Data.Models.Questions.QuestionConfiguration", b =>
                {
                    b.HasOne("Traisi.Data.Models.Questions.QuestionPart", null)
                        .WithMany("QuestionConfigurations")
                        .HasForeignKey("QuestionPartId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Traisi.Data.Models.Questions.QuestionOption", b =>
                {
                    b.HasOne("Traisi.Data.Models.Questions.QuestionPart", "QuestionPartParent")
                        .WithMany("QuestionOptions")
                        .HasForeignKey("QuestionPartParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Traisi.Data.Models.Questions.QuestionOptionConditional", b =>
                {
                    b.HasOne("Traisi.Data.Models.Questions.QuestionPart", "SourceQuestion")
                        .WithMany("QuestionOptionConditionalsSource")
                        .HasForeignKey("SourceQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Traisi.Data.Models.Questions.QuestionOption", "TargetOption")
                        .WithMany("QuestionOptionConditionalsTarget")
                        .HasForeignKey("TargetOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Traisi.Data.Models.Questions.QuestionPart", b =>
                {
                    b.HasOne("Traisi.Data.Models.Questions.QuestionPart", null)
                        .WithMany("QuestionPartChildren")
                        .HasForeignKey("QuestionPartId");

                    b.HasOne("Traisi.Data.Models.Surveys.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId");
                });

            modelBuilder.Entity("Traisi.Data.Models.Questions.QuestionPartView", b =>
                {
                    b.HasOne("Traisi.Data.Models.Questions.QuestionPartView", "CATIDependent")
                        .WithMany()
                        .HasForeignKey("CATIDependentId");

                    b.HasOne("Traisi.Data.Models.Questions.QuestionPartView", "ParentView")
                        .WithMany("QuestionPartViewChildren")
                        .HasForeignKey("ParentViewId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Traisi.Data.Models.Questions.QuestionPart", "QuestionPart")
                        .WithMany()
                        .HasForeignKey("QuestionPartId");

                    b.HasOne("Traisi.Data.Models.Questions.QuestionPart", "RepeatSource")
                        .WithMany()
                        .HasForeignKey("RepeatSourceId");

                    b.HasOne("Traisi.Data.Models.Surveys.SurveyView", "SurveyView")
                        .WithMany("QuestionPartViews")
                        .HasForeignKey("SurveyViewId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Traisi.Data.Models.ResponseTypes.ResponseValue", b =>
                {
                    b.HasOne("Traisi.Data.Models.Surveys.SurveyResponse", "SurveyResponse")
                        .WithMany("ResponseValues")
                        .HasForeignKey("SurveyResponseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Traisi.Data.Models.Surveys.ExtensionConfiguration", b =>
                {
                    b.HasOne("Traisi.Data.Models.Surveys.Survey", "Survey")
                        .WithMany("ExtensionConfigurations")
                        .HasForeignKey("SurveyId");
                });

            modelBuilder.Entity("Traisi.Data.Models.Surveys.Groupcode", b =>
                {
                    b.HasOne("Traisi.Data.Models.Surveys.Survey", "Survey")
                        .WithMany("GroupCodes")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Traisi.Data.Models.Surveys.Label", b =>
                {
                    b.HasOne("Traisi.Data.Models.Questions.QuestionConfiguration", null)
                        .WithMany("QuestionConfigurationLabels")
                        .HasForeignKey("QuestionConfigurationId");

                    b.HasOne("Traisi.Data.Models.Questions.QuestionOption", null)
                        .WithMany("QuestionOptionLabels")
                        .HasForeignKey("QuestionOptionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Traisi.Data.Models.Questions.QuestionPartView", null)
                        .WithMany("DescriptionLabels")
                        .HasForeignKey("QuestionPartViewDescriptionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Traisi.Data.Models.Questions.QuestionPartView", null)
                        .WithMany("Labels")
                        .HasForeignKey("QuestionPartViewId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Traisi.Data.Models.Surveys.Survey", null)
                        .WithMany("TitleLabels")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Traisi.Data.Models.Surveys.SurveyLogic", null)
                        .WithMany("ValidationMessages")
                        .HasForeignKey("SurveyLogicId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Traisi.Data.Models.Surveys.SurveyView", null)
                        .WithMany("ScreeningQuestionLabels")
                        .HasForeignKey("SurveyViewScreeningId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Traisi.Data.Models.Surveys.SurveyView", null)
                        .WithMany("TermsAndConditionsLabels")
                        .HasForeignKey("SurveyViewTermsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Traisi.Data.Models.Surveys.SurveyView", null)
                        .WithMany("ThankYouPageLabels")
                        .HasForeignKey("SurveyViewThankYouId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Traisi.Data.Models.Surveys.SurveyView", null)
                        .WithMany("WelcomePageLabels")
                        .HasForeignKey("SurveyViewWelcomePageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Traisi.Data.Models.Surveys.Shortcode", b =>
                {
                    b.HasOne("Traisi.Data.Models.Surveys.Groupcode", "Groupcode")
                        .WithMany()
                        .HasForeignKey("GroupcodeId");

                    b.HasOne("Traisi.Data.Models.Surveys.Survey", "Survey")
                        .WithMany("Shortcodes")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Traisi.Data.Models.Surveys.SurveyAccessRecord", b =>
                {
                    b.HasOne("Traisi.Data.Models.ApplicationUser", "AccessUser")
                        .WithMany()
                        .HasForeignKey("AccessUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Traisi.Data.Models.Surveys.PrimaryRespondent", "Respondent")
                        .WithMany("SurveyAccessRecords")
                        .HasForeignKey("RespondentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Traisi.Data.Models.Surveys.SurveyLogic", b =>
                {
                    b.HasOne("Traisi.Data.Models.Surveys.SurveyLogic", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Traisi.Data.Models.Questions.QuestionPart", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Traisi.Data.Models.Questions.QuestionPart", null)
                        .WithMany("Conditionals")
                        .HasForeignKey("QuestionPartId");

                    b.HasOne("Traisi.Data.Models.Surveys.SurveyLogic", "Root")
                        .WithMany()
                        .HasForeignKey("RootId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Traisi.Data.Models.Surveys.Survey", null)
                        .WithMany("SurveyLogic")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Traisi.Data.Models.Surveys.SurveyLogic", null)
                        .WithMany("Expressions")
                        .HasForeignKey("SurveyLogicId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Traisi.Data.Models.Questions.QuestionPart", "ValidationQuestion")
                        .WithMany()
                        .HasForeignKey("ValidationQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Traisi.Data.Models.Surveys.SurveyPermission", b =>
                {
                    b.HasOne("Traisi.Data.Models.Surveys.Survey", "Survey")
                        .WithMany("SurveyPermissions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Traisi.Data.Models.TraisiUser", null)
                        .WithMany("SurveyPermissions")
                        .HasForeignKey("TraisiUserId");

                    b.HasOne("Traisi.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Traisi.Data.Models.Surveys.SurveyRespondent", b =>
                {
                    b.HasOne("Traisi.Data.Models.Surveys.SurveyRespondentGroup", "SurveyRespondentGroup")
                        .WithMany("GroupMembers")
                        .HasForeignKey("SurveyRespondentGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Traisi.Data.Models.Surveys.SurveyRespondentGroup", b =>
                {
                    b.HasOne("Traisi.Data.Models.Surveys.PrimaryRespondent", "GroupPrimaryRespondent")
                        .WithOne()
                        .HasForeignKey("Traisi.Data.Models.Surveys.SurveyRespondentGroup", "GroupPrimaryRespondentId");
                });

            modelBuilder.Entity("Traisi.Data.Models.Surveys.SurveyResponse", b =>
                {
                    b.HasOne("Traisi.Data.Models.Questions.QuestionPart", "QuestionPart")
                        .WithMany()
                        .HasForeignKey("QuestionPartId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Traisi.Data.Models.Surveys.SurveyRespondent", "Respondent")
                        .WithMany()
                        .HasForeignKey("RespondentId");

                    b.HasOne("Traisi.Data.Models.Surveys.SurveyAccessRecord", "SurveyAccessRecord")
                        .WithMany()
                        .HasForeignKey("SurveyAccessRecordId");
                });

            modelBuilder.Entity("Traisi.Data.Models.Surveys.SurveyView", b =>
                {
                    b.HasOne("Traisi.Data.Models.Surveys.Survey", "Survey")
                        .WithMany("SurveyViews")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Traisi.Data.Models.SurveyUser", b =>
                {
                    b.HasOne("Traisi.Data.Models.Surveys.PrimaryRespondent", "PrimaryRespondent")
                        .WithMany()
                        .HasForeignKey("PrimaryRespondentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Traisi.Data.Models.Surveys.Shortcode", "Shortcode")
                        .WithMany()
                        .HasForeignKey("ShortcodeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Traisi.Data.Models.Surveys.PrimaryRespondent", b =>
                {
                    b.HasOne("Traisi.Data.Models.Surveys.Groupcode", "Groupcode")
                        .WithMany()
                        .HasForeignKey("GroupcodeId");

                    b.HasOne("Traisi.Data.Models.Surveys.Shortcode", "Shortcode")
                        .WithMany()
                        .HasForeignKey("ShortcodeId");

                    b.HasOne("Traisi.Data.Models.Surveys.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId");

                    b.HasOne("Traisi.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Traisi.Data.Models.Surveys.SubRespondent", b =>
                {
                    b.HasOne("Traisi.Data.Models.Surveys.PrimaryRespondent", "PrimaryRespondent")
                        .WithMany()
                        .HasForeignKey("PrimaryRespondentId");
                });
#pragma warning restore 612, 618
        }
    }
}
